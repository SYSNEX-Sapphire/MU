<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="P14_ThermalBath" Id="{2c2b0e51-5635-46ea-83dc-d55165a0b5b4}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P14_ThermalBath
VAR
	rTemperatureSV 		: ARRAY[1..6]OF REAL;

	(* Input from Device *)
	bTempDeviationAlarm	: ARRAY[1..6] OF BOOL;
	bCutOffAlarm		: ARRAY[1..6] OF BOOL;
	
	rTemperature_PV 		: ARRAY[1..6]OF REAL;
	isBath_Err 			: ARRAY[1..6]OF BOOL;
	isBath_TC_Broken 	: ARRAY[1..6]OF BOOL ; 

	//for send variable
	TimeOnDelay	: TON; //Time delay after Power ON of Thermal Bath
	TimeCycle			: TON;
	TimeWaitSend		: TON;
	TimeWaitReceive		: TON;
	bSendingEnable 		: BOOL:=TRUE; // Check the Sending Stage
	bSetValueMode 		: BOOL;
	rTemperatureTV 		: ARRAY[1..6]OF REAL;
	fbSend				: SendString;
	sSendString 		: STRING;
	bSendBusy			: BOOL;
	bSendingOK 			: BOOL;
	eSendErrorID		: ComError_t;

	// for received variable
	fbReceive			: ReceiveString;
	sReceivedString		: STRING;
	bStringReceived		: BOOL;
	bReceiveBusy		: BOOL;
	bReceiveError		: BOOL;
	eReceiveErrorID		: ComError_t;
	bReceiveTimeout		: BOOL;
	bReceivedOK 		: BOOL;
	
	nBathNumber 		: INT := 1;
	sBathNumber 		: STRING := '1';
	sReceivedBathNumber : STRING;
	nReceivedBathNumber : INT;
	sReceivedAffirmation : STRING;
	sReceivedData 		: STRING;
	
	(* Input *)
	bThermalBathCB		: BOOL;
	TonSendTmeOut: TON;
	SendTimeOutCount: DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* Read from Power Distribution Pannel *)
_DigitalInput();

// make a sending string
TimeCycle(IN := TimeOnDelay.Q, PT := T#1000MS); //Cycle for Serial Communication
IF TimeCycle.Q = TRUE THEN
	TimeCycle(IN := FALSE);
	_01_SendMessage();
END_IF

_02_ReceivedMessage();


TonSendTmeOut(IN:=bSendingEnable = FALSE ,PT:=T#10S);
IF TonSendTmeOut.Q THEN
	SendTimeOutCount := SendTimeOutCount+1;
	
	TonSendTmeOut(IN:=false);
	bSendingEnable:=TRUE;
END_IF]]></ST>
    </Implementation>
    <Action Name="_01_SendMessage" Id="{74478019-b9c0-47e4-b992-87807cac9ed1}">
      <Implementation>
        <ST><![CDATA[
// Make a sending string Set value or Request value 
IF bSendingEnable = TRUE THEN
	
	nBathNumber := nBathNumber + 1;
	IF nBathNumber > 4 THEN
		nBathNumber := 1;
	END_IF
	
	bSendingEnable := FALSE;
	bReceivedOK := FALSE;
	bSetValueMode := FALSE;
	
	//Target value(Bath) Set value
	IF (rTemperatureTV[nBathNumber] <> rTemperatureSV[nBathNumber])  THEN
		rTemperatureTV[nBathNumber] := rTemperatureSV[nBathNumber];
		sSendString := Real_To_String_ThermalBath(rTemperatureTV[nBathNumber],nBathNumber); //Send a SetValue=10.0 '$0201WSV100100$03'
		bSetValueMode := TRUE;
	ELSE
		sBathNumber := INT_TO_STRING(nBathNumber);
		sSendString := INSERT('$020RPV1$03',sBathNumber,2); //Request a PV
		bSetValueMode := FALSE;
	END_IF
	
	// Send string	
	fbSend(	SendString:= sSendString,
		TXbuffer:= GVL_Serial.TxBufferTB,
		Busy=> bSendBusy,
		Error=> );
		
	IF fbSend.Error <> COMERROR_NOERROR THEN
		eSendErrorID := fbSend.Error;
		bSendingOK := FALSE;
	ELSE
		eSendErrorID := COMERROR_NOERROR;
		bSendingOK := TRUE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_02_ReceivedMessage" Id="{4ee6464e-caec-4271-8da4-6dda07b65e24}">
      <Implementation>
        <ST><![CDATA[//	Receive string data:
//	The block receives any data strings beginning with a STX ($02) and ending with an ETX ($03) character.
TimeWaitReceive(IN := bSendingOK, PT := T#250MS); //Wait receiving data
IF TimeWaitReceive.Q THEN
	TimeWaitReceive(IN:= FALSE);
	fbReceive(
		Prefix:= '$02',
		Suffix:= '$03',
		Timeout:= T#1S,
		ReceivedString:= sReceivedString,
		RXbuffer:= GVL_Serial.RxBufferTB,
		StringReceived=> bStringReceived,
		Busy=> bReceiveBusy,
		Error=> ,
		RxTimeout=> bReceiveTimeout );
		
	IF bReceiveTimeout THEN
		isBath_Err[nReceivedBathNumber] := TRUE;
		bReceiveTimeout := FALSE;
	END_IF
	
	IF fbReceive.Error <> COMERROR_NOERROR THEN
		eReceiveErrorID := fbReceive.Error;
	END_IF
	
	IF bStringReceived THEN
		bStringReceived :=FALSE;
		bReceivedOK := TRUE;
		bSendingEnable := TRUE;
		sReceivedBathNumber := MID(STR:=sReceivedString, len:=1, pos:=3); //ReceivedString : '$0201$06PV100250$03'
		nReceivedBathNumber := STRING_TO_INT(sReceivedBathNumber);
		sReceivedAffirmation := MID(STR:=sReceivedString, len:=1, pos:=4); //Affirmation
		
		IF bSetValueMode THEN //Write SV Mode
			IF sReceivedAffirmation = '$06' THEN //'$06' ReceivedString : '$0201$06$03'
				isBath_Err[nReceivedBathNumber] := FALSE;
			ELSE
				//isBath_Err[nReceivedBathNumber] := TRUE;
			END_IF
			bSetValueMode := FALSE;
		ELSE //Read PV Mode
			sReceivedData := MID(STR:=sReceivedString, len:=5, pos:=8); //ReceivedString : '$0201$06PV100250$03'
			IF sReceivedData = '' THEN
				isBath_Err[nReceivedBathNumber] := TRUE;
				;
			ELSIF sReceivedData = 'HHHHH' THEN
				rTemperature_PV[nReceivedBathNumber] := -99.0;
				isBath_TC_Broken[nReceivedBathNumber] := TRUE;
				isBath_Err[nReceivedBathNumber] := FALSE;
			ELSE
				rTemperature_PV[nReceivedBathNumber] := (STRING_TO_REAL(sReceivedData))/10;
				isBath_TC_Broken[nReceivedBathNumber] := FALSE;
				isBath_Err[nReceivedBathNumber] := FALSE;
			END_IF
		END_IF
	END_IF
	
	

	bSendingEnable := TRUE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="_DigitalInput" Id="{0f3ed832-dd9c-4045-81e8-0db2135ee042}">
      <Implementation>
        <ST><![CDATA[//bThermalBathCB := GVL_IO.aDigitalInputIO[5].0;
bThermalBathCB := GVL_IO_GAS_CABINET.DI_02_ThermalBathsELCB;

(* Read from SMC Bath Device Value *)
//TimeOnDelay(IN:= P90_Interlock.bThermalBathMC, PT :=T#1S); //Time Delay after a Thermal Bath MC ON
TimeOnDelay(IN:= GVL_IO_GAS_CABINET.DI_02_ThermalBathsELCB, PT :=T#1S); //Time Delay after a Thermal Bath MC ON

bTempDeviationAlarm[1]	:= GVL_IO_GAS_CABINET.DI_05_ThermalBath_1DeviationAlarm;
bTempDeviationAlarm[2]	:= GVL_IO_GAS_CABINET.DI_05_ThermalBath_2DeviationAlarm;
bTempDeviationAlarm[3]	:= GVL_IO_GAS_CABINET.DI_06_ThermalBath_3DeviationAlarm;
bTempDeviationAlarm[4]	:= GVL_IO_GAS_CABINET.DI_06_ThermalBath_4DeviationAlarm;

bCutOffAlarm[1] := NOT(GVL_IO_GAS_CABINET.DI_05_ThermalBath_1CutOffAlarm); //Normally Contact
bCutOffAlarm[2] := NOT(GVL_IO_GAS_CABINET.DI_05_ThermalBath_2CutOffAlarm); 
bCutOffAlarm[3] := NOT(GVL_IO_GAS_CABINET.DI_06_ThermalBath_3CutOffAlarm); 
bCutOffAlarm[4] := NOT(GVL_IO_GAS_CABINET.DI_06_ThermalBath_4CutOffAlarm); 
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="P14_ThermalBath">
      <LineId Id="870" Count="2" />
      <LineId Id="1075" Count="0" />
      <LineId Id="874" Count="2" />
      <LineId Id="1091" Count="0" />
      <LineId Id="913" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="1079" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="1081" Count="0" />
      <LineId Id="1088" Count="0" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1080" Count="0" />
      <LineId Id="1092" Count="1" />
      <LineId Id="1090" Count="0" />
      <LineId Id="1083" Count="1" />
    </LineIds>
    <LineIds Name="P14_ThermalBath._01_SendMessage">
      <LineId Id="2" Count="2" />
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="37" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="5" Count="27" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="P14_ThermalBath._02_ReceivedMessage">
      <LineId Id="91" Count="10" />
      <LineId Id="103" Count="32" />
      <LineId Id="148" Count="0" />
      <LineId Id="136" Count="9" />
      <LineId Id="147" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="P14_ThermalBath._DigitalInput">
      <LineId Id="56" Count="15" />
      <LineId Id="55" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>